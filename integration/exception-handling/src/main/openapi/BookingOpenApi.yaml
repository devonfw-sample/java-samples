openapi: '3.0.2'
info:
  title: Booking REST API
  description: |-
    This API file is just an example to show the options when creating an OpenAPI file.
    This Api is a small example for the My Thai Star
  version: '1.0'
  contact:
    email: contact@mail.de
paths:

  /booking:
    post:
      tags:
        - "Booking"
      summary: Create a new Booking
      description: Creates and returns a new Booking
      operationId: createBooking
      responses:
        '201':
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '403':
          $ref: '#/components/responses/ValidationError'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'

  /booking/{bookingId}:
    get:
      tags:
        - "Booking"
      summary: Find a single booking by Id
      description: Returns a single booking
      operationId: getBookingById
      parameters:
        - name: bookingId
          in: path
          description: ID of booking to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

        '400':
          description: Invalid ID supplied
        '404':
          $ref: '#/components/responses/NotFound'

components:

  schemas:

    Booking:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        numberOfSeats:
          type: integer
          example: 4
          minimum: 1
          maximum: 20
        description:
          type: string
          example: "Needs a child chair"
        email:
          type: string
          example: "guest.email@email.com"
      required:
        - numberOfSeats
        - email

    ProblemDetails:
      discriminator:
        propertyName: _schema
      type: object
      properties:
        _schema:
          type: string
          description: This identifies the concrete ProblemDetails class from the OpenAPI spec.
        type:
          type: string
          description: A URN that identifies the problem type
          example: 'urn:problem:not_found'
        title:
          type: string
          description: A human readable explanation of the problem
          example: 'The specified resource was not found'
        status:
          type: integer
          description: The HTTP status of the error
          example: '404'
        detail:
          type: string
          description: A detailed message of the problem
          example: 'The Booking with id 404 was not found'
        instance:
          type: string
          description: A UUID in a URN form identifying the concrete problem instance
          example: 'urn:uuid:525ddaed-d2eb-4dd7-8fef-e45e3f1823b8'
    ValidationProblemDetails:
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          properties:
            failedValidation:
             type: array
             items:
               type: string

  responses:
    ValidationError:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ValidationProblemDetails'

    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
             $ref: '#/components/schemas/ProblemDetails'

